void pick_all(){
    while (beepers_present){
        pick_beeper();
    }
}



void find_south_east(){
    while(not_facing_south()){
        turn_left();
    }
    while(front_is_clear()){
        step();
    }
    while(not_facing_east()){
        turn_left();
    }
    while(front_is_clear()){
        step();
    }
    while(not_facing_west()){
        turn_left();
    }
}



bool facing_vertical(){
    if (facing_south() || facing_north()){
        return true;
    }
    else{
        return false;
    }
}



bool no_beepers(){
    if (no_beepers_present() && no_beepers_in_bag()){
        return true;
    }
    else{
        return false;
    }
}



void turn_to_south(){
    while (not_facing_south()){
        turn_left();
    }
}



void mark_empty_line(){
    put_beeper();
    while(front_is_clear()){
        step();
        put_beeper();
    }
}




- - - stairs - - -

void stairs() {
    while(right_is_blocked() || not_facing_east()) {
        if (right_is_clear()) {
            turn_left();
            turn_left();
            turn_left();
        }
        else if (left_is_clear() && front_is_blocked()) {
            turn_left();
        }
        else if (front_is_blocked()) {
            turn_left();
            turn_left();
        }
        while(beepers_present()) {
            pick_beeper();
        }
        step();
    }

   turn_left();
   turn_left();
   step();
   turn_left();
   turn_left();
   while(beepers_in_bag()) {
        put_beeper();
   }

}



- - - corner_marker - - -

void corner_marker() {
    while(not_facing_north()) {
        turn_left();
    }
    while(front_is_clear()) {
        step();
    }
    turn_left();
    while(front_is_clear()) {
        step();
    }

    turn_left();
    turn_left();

    while(no_beepers_present()) {
        if (front_is_clear()) {
            put_beeper();
            step();
        }
        else {
            turn_left();
            turn_left();
            turn_left();
        }
    }
}



- - - find_center - - -

void center() {
    step();
    step();

    if (front_is_clear()) {
        center();
    }

    if (front_is_blocked()) {
        turn_left();
        turn_left();
    }
    step();
}

void find_center() {
    while(not_facing_north()) {
        turn_left();
    }
    while(front_is_clear()) {
        step();
    }
    turn_left();
    while(front_is_clear()) {
        step();
    }

    turn_left();
    turn_left();

    center();
    turn_left();
    center();
}


- - - chessboard - - -

void turn_right() {
    turn_left();
    turn_left();
    turn_left();
}

void chessboard() {
    while(front_is_clear()) {
    turn_right();
    if (front_is_clear()) {
        step();
        turn_left();
        turn_left();
        if (beepers_present()) {
            step();
            turn_right();
            while (front_is_clear()) {
                step();
                put_beeper();
                if (front_is_clear()) {
                    step();
                    if (front_is_clear()) {
                        step();
                        put_beeper();
                        if (front_is_clear()) {
                            step();
                        }
                    }
                }
            }
        }
        else {
            step();
            turn_right();
            while (front_is_clear()) {
                if (no_beepers_present()) {
                    put_beeper();
                }
                if (front_is_clear()) {
                    step();
                    if (front_is_clear()) {
                        step();
                        put_beeper();
                    }
                }
            }
        }
    }
    else {
        turn_left();
        while (front_is_clear()) {
            step();
            put_beeper();
            if (front_is_clear()) {
                step();
                if (front_is_clear()) {
                    step();
                    put_beeper();
                    if(front_is_clear()) {
                        step();
                    }
                }
            }
        }
    }
    turn_left();
    turn_left();
    while(front_is_clear()) {
        step();
    }
    turn_right();
    if (front_is_clear()) {
        step();
        turn_right();
    }
    }
}



- - - divide - - - 

void divide(){
    step();
    while (beepers_present()) {
        pick_beeper();
    }
    while(beepers_in_bag()) {
        put_beeper();
        step();
        put_beeper();
        turn_left();
        turn_left();
        step();
        turn_left();
        turn_left();
    }
}



- - - olympics - - -

void olympics() {
    while(no_beepers_present()) {
        if (right_is_clear()) {
            turn_left();
            turn_left();
            turn_left();
        }
        else if (left_is_clear() && front_is_blocked()) {
            turn_left();
        }
        else if (front_is_blocked()) {
            turn_left();
            turn_left();
        }
        step();
    }

}



- - - x_mas - - -

void x_mas() {
    while(front_is_clear()) {
        step();
    }
    turn_left();
    turn_left();
    while(right_is_blocked()) {
        step();
    }

    turn_right();
    step();
    turn_right();
    step();

    while (right_is_blocked()) {
        put_beeper();
        turn_left();
        step();
        turn_right();
        step();
    }

    put_beeper();
    put_beeper();

    step();
    turn_right();
    while(front_is_clear()) {
        step();
    }

    while (front_is_blocked() && facing_south()) {
        put_beeper();
        turn_left();
        step();
        if (right_is_clear()) {
            turn_right();
            step();
        }
        else {
            turn_left();
            turn_left();
            step();
            pick_beeper();
            turn_left();
            turn_left();
            while (front_is_clear()) {
                step();
            }
        }

    }

}

void move_beepers(){
  
  if(beepers_present()){
    pick_beeper();
    while(front_is_clear()){
      step();
    }
    put_beeper();
    turn_left();
    turn_left();
    while(front_is_clear()){
      step();
    }
    turn_left();
    turn_left();
  
  move_beepers();
  } 
  while(front_is_clear()){
    step();

  }
  
  
  
}

void find_north_west() {
  while(not_facing_west()){
    turn_left();
  }
    while(front_is_clear()){
      step();
    }
  
  while(not_facing_north()){
    turn_left();
  }
  while(front_is_clear()){
      step();
    }
while(not_facing_east()){
  turn_left();
}
}



